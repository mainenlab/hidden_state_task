[gd_resource type="CanvasItemShader" format=1]

[resource]

_code = {
"fragment": "vec3 rgb2hsv(vec3 c)
{
    vec4 K = vec4(0.0, -1.0 / 3.0, 2.0 / 3.0, -1.0);
    vec4 p = mix(vec4(c.bg, K.wz), vec4(c.gb, K.xy), step(c.b, c.g));
    vec4 q = mix(vec4(p.xyw, c.r), vec4(c.r, p.yzx), step(p.x, c.r));

    float d = q.x - min(q.w, q.y);
    float e = 1.0e-10;
    return vec3(abs(q.z + (q.w - q.y) / (6.0 * d + e)), d / (q.x + e), q.x);
}


vec3 hsv2rgb(vec3 c)
{
    vec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);
    vec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);
    return c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);
}

uniform bool x;
uniform bool active;
vec4 textureColor = tex(TEXTURE, UV);
vec3 fragRGB = textureColor.rgb;
vec3 fragHSV = rgb2hsv(fragRGB).xyz;
if (!x) {
//	fragHSV.x = -0.85+fragHSV.z;//mod(fragHSV.x+0.4,1);
	fragHSV.x = mod(fragHSV.x+0.4,1);
}

if ((fragHSV.y <= 0.3) && !active) {
	fragHSV.z = fragHSV.z*0.5;
}

fragRGB = hsv2rgb(fragHSV);
COLOR  = vec4(fragRGB, textureColor.w);",
"fragment_ofs": 0,
"light": "",
"light_ofs": 0,
"vertex": "",
"vertex_ofs": 0
}

